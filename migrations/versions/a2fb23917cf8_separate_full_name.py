"""Separate full_name

Revision ID: a2fb23917cf8
Revises: 7d0764e1aa2f
Create Date: 2021-04-18 19:16:06.581873

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a2fb23917cf8'
down_revision = '7d0764e1aa2f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('first_name', sa.String(length=50), nullable=True))
    op.add_column('user', sa.Column('last_name', sa.String(length=50), nullable=True))
    # update the data
    user = sa.table(
        'user',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('full_name', sa.String(length=50), nullable=True),
        sa.Column('first_name', sa.String(length=50), nullable=False),
        sa.Column('last_name', sa.String(length=50), nullable=False),
    )
    connection = op.get_bind()
    # Select all users' full_names
    results = connection.execute(sa.select([user.c.id, user.c.full_name])).fetchall()
    for id_, full_name in results:
        first_name, last_name = full_name.rsplit(' ', 1)
        # Update the new columns
        connection.execute(user.update().where(user.c.id == id_).values(
            first_name=first_name,
            last_name=last_name,
        ))
    op.drop_column('user', 'full_name')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('full_name', sa.VARCHAR(length=50), nullable=True))
    # update the data
    user = sa.table(
        'user',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('full_name', sa.String(length=50), nullable=True),
        sa.Column('first_name', sa.String(length=50), nullable=False),
        sa.Column('last_name', sa.String(length=50), nullable=False),
    )
    connection = op.get_bind()
    # Select all users' full_names
    results = connection.execute(sa.select([user.c.id, user.c.first_name, user.c.last_name])).fetchall()
    for id_, first, last in results:
        full_name = ' '.join((first, last))
        # Update the new column
        connection.execute(user.update().where(user.c.id == id_).values(
            full_name=full_name,
        ))

    op.drop_column('user', 'last_name')
    op.drop_column('user', 'first_name')
    # ### end Alembic commands ###
